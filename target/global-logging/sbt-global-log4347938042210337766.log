[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Troy\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Troy\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Eclipse Adoptium Java 11.0.18)
[debug]       Load.loadUnit: plugins took 68.736ms
[debug]       Load.loadUnit: defsScala took 0.1635ms
[debug] [Loading] Scanning directory C:\Users\Troy\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Troy\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 11.3998 ms
[debug]           Load.resolveProject(global-plugins) took 33.0431ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Troy\.sbt\1.0\plugins, plugins: List(<none>))) took 60.2881ms
[debug] [Loading] Done in C:\Users\Troy\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 74.2276ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1366ms
[debug]     Load.loadUnit(file:/C:/Users/Troy/.sbt/1.0/plugins/, ...) took 148.6709ms
[debug]   Load.apply: load took 257.2928ms
[debug]   Load.apply: resolveProjects took 4.023ms
[debug]   Load.apply: finalTransforms took 34.2352ms
[debug]   Load.apply: config.delegates took 4.5295ms
[debug]   Load.apply: Def.make(settings)... took 234.8067ms
[debug]   Load.apply: structureIndex took 58.2182ms
[debug]   Load.apply: mkStreams took 0.9654ms
[info] loading global plugins from C:\Users\Troy\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1271.3328ms
[debug]           Load.loadUnit: plugins took 16.7358ms
[debug]           Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi\project
[debug]             Load.loadUnit: mkEval took 4.3962ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.2494 ms
[info] loading settings for project jedi-build from idea.sbt ...
[debug]               Load.resolveProject(jedi-build) took 5.0521ms
[debug]             Load.loadTransitive: finalizeProject(Project(id jedi-build, base: C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi\project, plugins: List(<none>))) took 6.7026ms
[debug] [Loading] Done in C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi\project, returning: (jedi-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1175.0148ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.5558ms
[debug]         Load.loadUnit(file:/C:/Users/Troy/Documents/SJSU/CS152_Programming_paradigms/Jedi/project/, ...) took 1194.9691ms
[debug]       Load.apply: load took 1195.8895ms
[debug]       Load.apply: resolveProjects took 0.0855ms
[debug]       Load.apply: finalTransforms took 5.4284ms
[debug]       Load.apply: config.delegates took 0.3407ms
[debug]       Load.apply: Def.make(settings)... took 33.8358ms
[debug]       Load.apply: structureIndex took 14.745ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1821.0956ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi
[debug]       Load.loadUnit: mkEval took 0.1497ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.392 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 22.7035ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi, plugins: List(<none>))) took 25.1032ms
[debug] [Loading] Done in C:\Users\Troy\Documents\SJSU\CS152_Programming_paradigms\Jedi, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 693.6766ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.7425ms
[debug]   Load.loadUnit(file:/C:/Users/Troy/Documents/SJSU/CS152_Programming_paradigms/Jedi/, ...) took 2520.8894ms
[debug] Load.apply: load took 2522.0559ms
[debug] Load.apply: resolveProjects took 0.0979ms
[debug] Load.apply: finalTransforms took 15.2438ms
[debug] Load.apply: config.delegates took 0.1809ms
[debug] Load.apply: Def.make(settings)... took 35.5115ms
[debug] Load.apply: structureIndex took 27.3383ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to Jedi (in build file:/C:/Users/Troy/Documents/SJSU/CS152_Programming_paradigms/Jedi/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52335 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52335, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Jedi (in build file:/C:/Users/Troy/Documents/SJSU/CS152_Programming_paradigms/Jedi/)
[debug] > Exec(idea-shell, None, None)
